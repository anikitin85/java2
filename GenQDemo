// Generic queue

// A generic queue interface and 2 exceptions.
public interface iGenQ<T> {
	void put(T ch) throws QueueFullException;
	T get() throws QueueEmptyException;
}

public class QueueFullException extends Exception {
	int size;
	
	QueueFullException(int s) { size = s; }
	
	public String toString() {
		return "\nQueue is full. Maximum size is " + size;
	}
}

public class QueueEmptyException extends Exception {
	public String toString() {
		return "\nQueue is empty";
	}
}

// A generic fixed-size queue class.
class GenQueue<T> implements IGenQ<T> {
	private T[] q;
	private int putloc, getloc;
	
	// Constructor
	GenQueue(T[] a) {
		q = a;
		putloc = getloc = 0;
	}
	
	public void put(T ob) throws QueueFullException {
		if (putloc == q.length) throw new QueueFullException(q.length);
		q[putloc++] = ob;
	}
	
	public T get() throws QueueEmptyException {
		if (getloc == putloc) throw new QueueEmptyException;
		return q[getloc++];
	}
}

// Demonstrate a generic queue class.
class GenQDemo {
	public static void main(String[] args) {
		// Create an Integer queue.
		Integer[] iStore = new Integer[10];
		GenQueue<Integer> q = new GenQueue<>(iStore);
		Integer iVal;
		
		System.out.println("Demonstrate a queue of Integers.");
		try {
			for (int i = 0; i < 5; i++) {
				System.out.println("Adding " + i + " to q.");
				q.put(i);
			}
		} catch (QueueFullException e) {
			System.out.println(e);
		}
		System.out.println();
		
		try {
			for (int i = 0; i < 5; i++) {
				System.out.print("Getting next Integer from q: ");
				iVal = q.get();
				System.out.println(iVal);
			}
		} catch (QueueEmptyException e) {
			System.out.println(e);
		}
		System.out.println();
		
		// Create a Double queue.
		Double[] dStore = new Double[10];
		GenQueue<Double> q2 = new GenQueue<>(dStore);
		Double dVal;
		
		System.out.println("Demonstrate a queue of Doubles.");
		try {
			for (int i = 0; i < 5; i++) {
				System.out.println("Adding " + (double) i/2 + " to q2.");
				q2.put((double) i/2);
			}
		} catch (QueueFullException e) {
			System.out.println(e);
		}
		System.out.println();
		
		try {
			for (int i = 0; i < 5; i++) {
				System.out.print("Getting next Double from q2: ");
				dVal = q2.get();
				System.out.println(dVal);
			}
		} catch (QueueEmptyException e) {
			System.out.println(e);
		}
	}
}
